// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hrOT.Infrastructure.Persistence;

#nullable disable

namespace hrOT.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230707074835_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            RoleId = "37dde3f4-d0c9-4477-97d6-ff29f677dccc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Allowance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AllowanceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AllowanceTypeId");

                    b.HasIndex("EmployeeContractId");

                    b.ToTable("Allowances");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426655440030"),
                            AllowanceTypeId = new Guid("123e4567-e89b-12d3-a456-426655440000"),
                            Amount = 500000.0,
                            Created = new DateTime(2023, 6, 28, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            EmployeeContractId = new Guid("123e4567-e89b-12d3-a456-426655440020"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440031"),
                            AllowanceTypeId = new Guid("223e4567-e89b-12d3-a456-426655440000"),
                            Amount = 1000000.0,
                            Created = new DateTime(2023, 6, 28, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            EmployeeContractId = new Guid("123e4567-e89b-12d3-a456-426655440020"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440032"),
                            AllowanceTypeId = new Guid("323e4567-e89b-12d3-a456-426655440000"),
                            Amount = 2000000.0,
                            Created = new DateTime(2023, 6, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            EmployeeContractId = new Guid("123e4567-e89b-12d3-a456-426655440020"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440033"),
                            AllowanceTypeId = new Guid("423e4567-e89b-12d3-a456-426655440000"),
                            Amount = 3000000.0,
                            Created = new DateTime(2023, 6, 28, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            EmployeeContractId = new Guid("123e4567-e89b-12d3-a456-426655440020"),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440034"),
                            AllowanceTypeId = new Guid("523e4567-e89b-12d3-a456-426655440000"),
                            Amount = 4000000.0,
                            Created = new DateTime(2023, 6, 28, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            EmployeeContractId = new Guid("123e4567-e89b-12d3-a456-426655440020"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.AllowanceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eligibility_Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPayTax")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AllowanceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Trợ cấp được cấp cho nhân viên dựa trên thâm niên làm việc trong công ty.",
                            EligibilityCriteria = "Nhân viên có thâm niên làm việc từ 5 năm trở lên.",
                            IsDeleted = false,
                            IsPayTax = true,
                            LastModified = new DateTime(2023, 6, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Trợ cấp thâm niên",
                            Requirements = "Không yêu cầu."
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Trợ cấp được cấp cho nhân viên để chi trả các chi phí đi lại.",
                            EligibilityCriteria = "Áp dụng cho tất cả nhân viên công ty.",
                            IsDeleted = false,
                            IsPayTax = false,
                            LastModified = new DateTime(2023, 6, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Trợ cấp đi lại",
                            Requirements = "Không yêu cầu."
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Trợ cấp được cấp cho nhân viên để trang trải chi phí ăn trưa hàng ngày.",
                            EligibilityCriteria = "Áp dụng cho tất cả nhân viên công ty.",
                            IsDeleted = false,
                            IsPayTax = true,
                            LastModified = new DateTime(2023, 6, 28, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Trợ cấp ăn trưa",
                            Requirements = "Không yêu cầu."
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Trợ cấp được cấp cho nhân viên khi làm thêm giờ làm việc.",
                            EligibilityCriteria = "Áp dụng cho nhân viên làm thêm giờ.",
                            IsDeleted = false,
                            IsPayTax = true,
                            LastModified = new DateTime(2023, 6, 28, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Trợ cấp làm thêm giờ",
                            Requirements = "Yêu cầu có xác nhận của quản lý."
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Trợ cấp được cấp cho nhân viên để hỗ trợ chi phí chăm sóc sức khỏe.",
                            EligibilityCriteria = "Áp dụng cho tất cả nhân viên công ty.",
                            IsDeleted = false,
                            IsPayTax = true,
                            LastModified = new DateTime(2023, 6, 28, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Trợ cấp sức khỏe",
                            Requirements = "Không yêu cầu."
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.AnnualWorkingDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Coefficients")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeDate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AnnualWorkingDays");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426655440001"),
                            BankName = "Ngân hàng TMCP Á Châu",
                            Created = new DateTime(2023, 6, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Asia Commercial Joint Stock Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440002"),
                            BankName = "Ngân hàng TMCP Tiên Phong",
                            Created = new DateTime(2023, 6, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Tien Phong Commercial Joint Stock Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440003"),
                            BankName = "Ngân hàng TMCP Đông Á",
                            Created = new DateTime(2023, 6, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Dong A Commercial Joint Stock Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440004"),
                            BankName = "Ngân Hàng TMCP Đông Nam Á",
                            Created = new DateTime(2023, 6, 28, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Southeast Asia Commercial Joint Stock Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440005"),
                            BankName = "Ngân hàng TMCP An Bình",
                            Created = new DateTime(2023, 6, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "An Binh Commercial Joint Stock Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("623e4567-e89b-12d3-a456-426655440006"),
                            BankName = "Ngân hàng TMCP Bắc Á",
                            Created = new DateTime(2023, 6, 28, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Bac A Commercial Joint Stock Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("723e4567-e89b-12d3-a456-426655440007"),
                            BankName = "Ngân hàng TMCP Bản Việt",
                            Created = new DateTime(2023, 6, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Vietcapital Commercial Joint Stock Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("823e4567-e89b-12d3-a456-426655440008"),
                            BankName = "Ngân hàng TMCP Hàng hải Việt Nam",
                            Created = new DateTime(2023, 6, 28, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Vietnam Maritime Joint – Stock Commercial Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("923e4567-e89b-12d3-a456-426655440009"),
                            BankName = "Ngân hàng TMCP Hàng hóa",
                            Created = new DateTime(2023, 6, 28, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Vietnam Bank for Industry and Trade",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a23e4567-e89b-12d3-a456-426655440010"),
                            BankName = "Ngân hàng TMCP Nam Á",
                            Created = new DateTime(2023, 6, 28, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Nam A Commercial Joint Stock Bank",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Selected")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("BankAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440001"),
                            BankAccountName = "John Doe",
                            BankAccountNumber = "0123456789",
                            BankId = new Guid("123e4567-e89b-12d3-a456-426655440001"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(5978),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Selected = true
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440002"),
                            BankAccountName = "Jane Smith",
                            BankAccountNumber = "9876543210",
                            BankId = new Guid("223e4567-e89b-12d3-a456-426655440002"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(5984),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Selected = false
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440003"),
                            BankAccountName = "Robert Johnson",
                            BankAccountNumber = "5555555555",
                            BankId = new Guid("323e4567-e89b-12d3-a456-426655440003"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(5990),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Selected = false
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Degree", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Degrees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440011"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6016),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Name = "Bằng Cử nhân Công nghệ thông tin",
                            Photo = "test",
                            Status = 2,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440012"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6021),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Name = "Thạc sĩ Khoa học Máy tính",
                            Photo = "test",
                            Status = 2,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440013"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6027),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Name = "Tiến sĩ Công nghệ Thông tin",
                            Photo = "test",
                            Status = 2,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440014"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6031),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Name = "Bằng Cử nhân Khoa học Máy tính",
                            Photo = "test",
                            Status = 2,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440015"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6036),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Name = "Tiến sĩ Khoa học Máy tính ứng dụng",
                            Photo = "test",
                            Status = 2,
                            Type = 3
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Bộ phận chịu trách nhiệm phát triển các ứng dụng và giải pháp công nghệ mới.",
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Bộ phận Phát triển"
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Bộ phận cung cấp hỗ trợ kỹ thuật và giải quyết sự cố cho khách hàng.",
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Bộ phận Hỗ trợ kỹ thuật"
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Bộ phận quản lý và điều phối các dự án công nghệ trong công ty.",
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Bộ phận Quản lý Dự án"
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Bộ phận chịu trách nhiệm quản lý và duy trì hệ thống mạng trong công ty.",
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Bộ phận Kỹ thuật Mạng"
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440000"),
                            Created = new DateTime(2023, 6, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            Description = "Bộ phận thực hiện phân tích và xử lý dữ liệu để đưa ra thông tin và thông báo phù hợp.",
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Bộ phận Phân tích Dữ liệu"
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.DetailTaxIncome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<Guid>("PaySlipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Payment")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PaySlipId");

                    b.ToTable("DetailTaxIncomes");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CVPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDateCIN")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCIOnTheBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCIOnTheFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceForCIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.HasIndex("PositionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            ApplicationUserId = "fe30e976-2640-4d35-8334-88e7c3b1eac1",
                            Created = new DateTime(2023, 6, 28, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            IsDeleted = false,
                            PositionId = new Guid("123e4567-e89b-12d3-a456-426655440001")
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.EmployeeContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ContractType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CustomSalary")
                        .HasColumnType("float");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("File")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Job")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<int?>("SalaryType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeContracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426655440020"),
                            ContractType = 2,
                            Created = new DateTime(2023, 6, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 12, 31, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Job = "Nhân viên",
                            Salary = 5000000.0,
                            SalaryType = 1,
                            StartDate = new DateTime(2023, 6, 28, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Exchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Giam_Tru")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Muc_Quy_Doi")
                        .HasColumnType("float");

                    b.Property<double?>("Thue_Suat")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Exchanges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d9f3a521-36e4-4a5c-9a89-0c733e92e85b"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            GiamTru = 0.0,
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            MucQuyDoi = 4750000.0,
                            ThueSuat = 0.94999999999999996
                        },
                        new
                        {
                            Id = new Guid("3a1d42d9-9ee7-4a4c-b283-6e8f9126e44a"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            GiamTru = 250000.0,
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            MucQuyDoi = 9250000.0,
                            ThueSuat = 0.90000000000000002
                        },
                        new
                        {
                            Id = new Guid("08d5ef29-44a5-47d0-9a85-28d9d0dc30f3"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            GiamTru = 750000.0,
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            MucQuyDoi = 16050000.0,
                            ThueSuat = 0.84999999999999998
                        },
                        new
                        {
                            Id = new Guid("9218741c-99f6-40a2-87f4-d4baf4c9e15d"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            GiamTru = 1650000.0,
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            MucQuyDoi = 27250000.0,
                            ThueSuat = 0.80000000000000004
                        },
                        new
                        {
                            Id = new Guid("e28a08ad-2b30-4df5-bc95-684d56ad8a56"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            GiamTru = 3250000.0,
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            MucQuyDoi = 42250000.0,
                            ThueSuat = 0.75
                        },
                        new
                        {
                            Id = new Guid("5ef5f6be-ef53-4af2-8b18-78fc6b8a295f"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            GiamTru = 5850000.0,
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            MucQuyDoi = 61850000.0,
                            ThueSuat = 0.69999999999999996
                        },
                        new
                        {
                            Id = new Guid("7f1b1d11-3070-4b4b-96db-801d448a8920"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            GiamTru = 9850000.0,
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            MucQuyDoi = 1.7976931348623157E+308,
                            ThueSuat = 0.65000000000000002
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameProject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TeamSize")
                        .HasColumnType("int");

                    b.Property<string>("TechStack")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440016"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6069),
                            CreatedBy = "Admin",
                            Description = "Dự án Quản lý hệ thống CRM cho khách hàng lớn",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2021, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NameProject = "Dự án Quản lý hệ thống CRM",
                            StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TeamSize = 5,
                            TechStack = ".NET, SQL Server, Angular"
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440017"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6075),
                            CreatedBy = "Admin",
                            Description = "Dự án Phát triển ứng dụng di động trên nền tảng iOS và Android",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NameProject = "Dự án Phát triển ứng dụng di động",
                            StartDate = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TeamSize = 8,
                            TechStack = "Swift, Kotlin, Firebase"
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440018"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6081),
                            CreatedBy = "Admin",
                            Description = "Dự án Xây dựng hệ thống quản lý dữ liệu cho khách hàng trong lĩnh vực tài chính",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NameProject = "Dự án Xây dựng hệ thống quản lý dữ liệu",
                            StartDate = new DateTime(2018, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TeamSize = 4,
                            TechStack = "Java, Spring Boot, MySQL"
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440019"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6087),
                            CreatedBy = "Admin",
                            Description = "Dự án Migrating hệ thống cũ sang môi trường mới",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2018, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NameProject = "Dự án Migrating hệ thống cũ",
                            StartDate = new DateTime(2017, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TeamSize = 3,
                            TechStack = "ASP.NET, SQL Server, Azure"
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440020"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6092),
                            CreatedBy = "Admin",
                            Description = "Dự án Phát triển ứng dụng web sử dụng công nghệ mới",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2017, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            NameProject = "Dự án Phát triển ứng dụng web",
                            StartDate = new DateTime(2016, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = true,
                            TeamSize = 6,
                            TechStack = "React, Node.js, MongoDB"
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CitizenIdentificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDateCI")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDependent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCIOnTheBack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoCIOnTheFront")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceForCI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Relationship")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Families");

                    b.HasData(
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440021"),
                            CitizenIdentificationNumber = "123456789",
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6121),
                            CreatedBy = "Admin",
                            CreatedDateCI = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            IsDependent = true,
                            Name = "Nguyễn Văn A",
                            PhotoCIOnTheBack = "back.jpg",
                            PhotoCIOnTheFront = "front.jpg",
                            PlaceForCI = "Hà Nội",
                            Relationship = 1
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440022"),
                            CitizenIdentificationNumber = "987654321",
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6129),
                            CreatedBy = "Admin",
                            CreatedDateCI = new DateTime(2019, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1985, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            IsDependent = true,
                            Name = "Nguyễn Thị B",
                            PhotoCIOnTheBack = "back.jpg",
                            PhotoCIOnTheFront = "front.jpg",
                            PlaceForCI = "Hồ Chí Minh",
                            Relationship = 1
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440023"),
                            CitizenIdentificationNumber = "654321789",
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6134),
                            CreatedBy = "Admin",
                            CreatedDateCI = new DateTime(2022, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2010, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            IsDependent = true,
                            Name = "Nguyễn Minh C",
                            PhotoCIOnTheBack = "back.jpg",
                            PhotoCIOnTheFront = "front.jpg",
                            PlaceForCI = "Đà Nẵng",
                            Relationship = 4
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440024"),
                            CitizenIdentificationNumber = "321789654",
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6142),
                            CreatedBy = "Admin",
                            CreatedDateCI = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2015, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            IsDependent = true,
                            Name = "Nguyễn Đức D",
                            PhotoCIOnTheBack = "back.jpg",
                            PhotoCIOnTheFront = "front.jpg",
                            PlaceForCI = "Hải Phòng",
                            Relationship = 4
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440025"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6147),
                            CreatedBy = "Admin",
                            DateOfBirth = new DateTime(1990, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            IsDependent = false,
                            Name = "Nguyễn Thị E",
                            Relationship = 3
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.LeaveLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LeaveHours")
                        .HasColumnType("float");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeaveLogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("623e4567-e89b-12d3-a456-426655440041"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6262),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LeaveHours = 8.0,
                            LeaveTypeId = new Guid("1611aee4-0a90-464d-927c-462f51d19120"),
                            Reason = "Nghỉ ốm",
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("623e4567-e89b-12d3-a456-426655440042"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6273),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LeaveHours = 4.0,
                            LeaveTypeId = new Guid("1611aee4-0a90-464d-927c-462f51d19120"),
                            Reason = "Nghỉ phép",
                            StartDate = new DateTime(2023, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("623e4567-e89b-12d3-a456-426655440043"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6279),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LeaveHours = 8.0,
                            LeaveTypeId = new Guid("0d87bff5-e9ca-4e8a-af18-6cc2e804e57d"),
                            Reason = "Nghỉ ốm",
                            StartDate = new DateTime(2023, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("623e4567-e89b-12d3-a456-426655440044"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6284),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LeaveHours = 4.0,
                            LeaveTypeId = new Guid("18167791-8248-4924-a1c6-90858852f905"),
                            Reason = "Nghỉ phép",
                            StartDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("623e4567-e89b-12d3-a456-426655440045"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6289),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LeaveHours = 8.0,
                            LeaveTypeId = new Guid("51c55016-58c4-49d3-b0b2-2d7e0a9cd7d7"),
                            Reason = "Nghỉ ốm",
                            StartDate = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Benefit")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReward")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1611aee4-0a90-464d-927c-462f51d19120"),
                            Benefit = 10,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6315),
                            Description = "Nghỉ mà nhân viên nữ được nghỉ trong thời kỳ mang thai và sau sinh.",
                            IsDeleted = false,
                            IsReward = true,
                            Name = "Nghỉ thai sản"
                        },
                        new
                        {
                            Id = new Guid("0d87bff5-e9ca-4e8a-af18-6cc2e804e57d"),
                            Benefit = 10,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6323),
                            Description = "Nghỉ mà nhân viên nam được nghỉ để hỗ trợ đối tác trong thời kỳ mang thai và sau sinh.",
                            IsDeleted = false,
                            IsReward = true,
                            Name = "Nghỉ phép cha"
                        },
                        new
                        {
                            Id = new Guid("18167791-8248-4924-a1c6-90858852f905"),
                            Benefit = 2,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6325),
                            Description = "Nghỉ dành cho nhân viên để nghỉ ngơi, thư giãn và có thời gian cá nhân.",
                            IsDeleted = false,
                            IsReward = false,
                            Name = "Nghỉ phép hàng năm"
                        },
                        new
                        {
                            Id = new Guid("51c55016-58c4-49d3-b0b2-2d7e0a9cd7d7"),
                            Benefit = 2,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6328),
                            Description = "Nghỉ khi nhân viên bị ốm hoặc cần chăm sóc y tế.",
                            IsDeleted = false,
                            IsReward = false,
                            Name = "Nghỉ ốm"
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.OvertimeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Coefficients")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("OvertimeLogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440031"),
                            Coefficients = 1.5,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6175),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalHours = 2.5
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440032"),
                            Coefficients = 1.5,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6222),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartDate = new DateTime(2023, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalHours = 3.0
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440033"),
                            Coefficients = 1.5,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6227),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartDate = new DateTime(2023, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalHours = 1.5
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440034"),
                            Coefficients = 2.0,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6232),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartDate = new DateTime(2023, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalHours = 4.0
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440035"),
                            Coefficients = 2.0,
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6236),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            EndDate = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            StartDate = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2,
                            TotalHours = 2.0
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.PaySlip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Actual_Work_Hours")
                        .HasColumnType("float");

                    b.Property<double?>("BHTN_Comp")
                        .HasColumnType("float");

                    b.Property<double?>("BHTN_Emp")
                        .HasColumnType("float");

                    b.Property<double?>("BHXH_Comp")
                        .HasColumnType("float");

                    b.Property<double?>("BHXH_Emp")
                        .HasColumnType("float");

                    b.Property<double?>("BHYT_Comp")
                        .HasColumnType("float");

                    b.Property<double?>("BHYT_Emp")
                        .HasColumnType("float");

                    b.Property<string>("BankAcountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("BankAcountNumber")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Bonus")
                        .HasColumnType("float");

                    b.Property<double?>("Company_Paid")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Deduction")
                        .HasColumnType("float");

                    b.Property<Guid>("EmployeeContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Final_Salary")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Leave_Hours")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ot_Hours")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Paid_date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<int?>("Standard_Work_Hours")
                        .HasColumnType("int");

                    b.Property<double?>("Tax_In_Come")
                        .HasColumnType("float");

                    b.Property<double?>("Total_Allowance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeContractId");

                    b.ToTable("PaySlips");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("123e4567-e89b-12d3-a456-426655440001"),
                            Created = new DateTime(2023, 6, 28, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            DepartmentId = new Guid("123e4567-e89b-12d3-a456-426655440000"),
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Quản lý Dự án"
                        },
                        new
                        {
                            Id = new Guid("223e4567-e89b-12d3-a456-426655440002"),
                            Created = new DateTime(2023, 6, 28, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            DepartmentId = new Guid("223e4567-e89b-12d3-a456-426655440000"),
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Kỹ sư Phần mềm"
                        },
                        new
                        {
                            Id = new Guid("323e4567-e89b-12d3-a456-426655440003"),
                            Created = new DateTime(2023, 6, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            DepartmentId = new Guid("323e4567-e89b-12d3-a456-426655440000"),
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Chuyên viên Hỗ trợ kỹ thuật"
                        },
                        new
                        {
                            Id = new Guid("423e4567-e89b-12d3-a456-426655440004"),
                            Created = new DateTime(2023, 6, 28, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            DepartmentId = new Guid("423e4567-e89b-12d3-a456-426655440000"),
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Chuyên gia Bảo mật"
                        },
                        new
                        {
                            Id = new Guid("523e4567-e89b-12d3-a456-426655440005"),
                            Created = new DateTime(2023, 6, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Admin",
                            DepartmentId = new Guid("523e4567-e89b-12d3-a456-426655440000"),
                            IsDeleted = false,
                            LastModified = new DateTime(2023, 6, 28, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "Admin",
                            Name = "Trưởng Nhóm Phân tích Dữ liệu"
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Skill_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("723e4567-e89b-12d3-a456-426655440051"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6359),
                            CreatedBy = "Admin",
                            IsDeleted = false,
                            SkillName = "Lập trình Java",
                            SkillDescription = "Mô tả kỹ năng lập trình Java"
                        },
                        new
                        {
                            Id = new Guid("723e4567-e89b-12d3-a456-426655440052"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6363),
                            CreatedBy = "Admin",
                            IsDeleted = false,
                            SkillName = "Phân tích yêu cầu",
                            SkillDescription = "Mô tả kỹ năng phân tích yêu cầu"
                        },
                        new
                        {
                            Id = new Guid("723e4567-e89b-12d3-a456-426655440053"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6366),
                            CreatedBy = "Admin",
                            IsDeleted = false,
                            SkillName = "Thử nghiệm phần mềm",
                            SkillDescription = "Mô tả kỹ năng thử nghiệm phần mềm"
                        },
                        new
                        {
                            Id = new Guid("723e4567-e89b-12d3-a456-426655440054"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6370),
                            CreatedBy = "Admin",
                            IsDeleted = false,
                            SkillName = "Quản lý dự án",
                            SkillDescription = "Mô tả kỹ năng quản lý dự án"
                        },
                        new
                        {
                            Id = new Guid("723e4567-e89b-12d3-a456-426655440055"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6373),
                            CreatedBy = "Admin",
                            IsDeleted = false,
                            SkillName = "Công nghệ web",
                            SkillDescription = "Mô tả kỹ năng công nghệ web"
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Skill_Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SkillId");

                    b.ToTable("Skill_Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("823e4567-e89b-12d3-a456-426655440061"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6397),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Level = "Chuyên gia",
                            SkillId = new Guid("723e4567-e89b-12d3-a456-426655440051")
                        },
                        new
                        {
                            Id = new Guid("823e4567-e89b-12d3-a456-426655440062"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6403),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Level = "Trung bình",
                            SkillId = new Guid("723e4567-e89b-12d3-a456-426655440052")
                        },
                        new
                        {
                            Id = new Guid("823e4567-e89b-12d3-a456-426655440063"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6407),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Level = "Trung bình",
                            SkillId = new Guid("723e4567-e89b-12d3-a456-426655440053")
                        },
                        new
                        {
                            Id = new Guid("823e4567-e89b-12d3-a456-426655440064"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6414),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Level = "Chuyên gia",
                            SkillId = new Guid("723e4567-e89b-12d3-a456-426655440054")
                        },
                        new
                        {
                            Id = new Guid("823e4567-e89b-12d3-a456-426655440065"),
                            Created = new DateTime(2023, 7, 7, 14, 48, 35, 70, DateTimeKind.Local).AddTicks(6419),
                            CreatedBy = "Admin",
                            EmployeeId = new Guid("123e4567-e89b-12d3-a456-426655440010"),
                            IsDeleted = false,
                            Level = "Trung bình",
                            SkillId = new Guid("723e4567-e89b-12d3-a456-426655440055")
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.TaxInCome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Muc_chiu_thue")
                        .HasColumnType("float");

                    b.Property<double?>("Thue_suat")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TaxInComes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a279788d-0fa2-4d9e-9e8e-5d689e853972"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            Mucchiuthue = 5000000.0,
                            Thuesuat = 0.050000000000000003
                        },
                        new
                        {
                            Id = new Guid("2d6a8e64-6130-456b-9c9d-95a1bc0a11fd"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            Mucchiuthue = 10000000.0,
                            Thuesuat = 0.10000000000000001
                        },
                        new
                        {
                            Id = new Guid("e582dd24-ec47-4c64-b0a7-6f8647b488a7"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            Mucchiuthue = 18000000.0,
                            Thuesuat = 0.14999999999999999
                        },
                        new
                        {
                            Id = new Guid("c0b17a9e-ee6f-4fe0-8e6f-33d5c63640c8"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            Mucchiuthue = 32000000.0,
                            Thuesuat = 0.20000000000000001
                        },
                        new
                        {
                            Id = new Guid("f0f3e78c-67c9-4e5e-a9fc-c8d2e7c1e5f5"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            Mucchiuthue = 52000000.0,
                            Thuesuat = 0.25
                        },
                        new
                        {
                            Id = new Guid("78a65c98-2d7a-4c57-98f0-81f5a870a915"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            Mucchiuthue = 80000000.0,
                            Thuesuat = 0.29999999999999999
                        },
                        new
                        {
                            Id = new Guid("4ae0e892-5369-4ef1-9e37-5d4e0a9a3e2e"),
                            Created = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "test",
                            IsDeleted = false,
                            LastModified = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastModifiedBy = "test",
                            Mucchiuthue = 1.7976931348623157E+308,
                            Thuesuat = 0.34999999999999998
                        });
                });

            modelBuilder.Entity("hrOT.Domain.Entities.TimeAttendanceLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Ducation")
                        .HasColumnType("float");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeAttendanceLogs");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.TodoItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("TodoItems");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.TodoList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TodoLists");
                });

            modelBuilder.Entity("hrOT.Domain.IdentityModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "871a809a-b3fa-495b-9cc2-c5d738a866cf",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(2002, 6, 20, 8, 30, 56, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "445607b7-57f3-4092-9129-c8becc104929",
                            Email = "tekato2002@gmail.com",
                            EmailConfirmed = false,
                            Fullname = "string",
                            LockoutEnabled = true,
                            NormalizedEmail = "TEKATO2002@GMAIL.COM",
                            NormalizedUserName = "LEWIS",
                            PasswordHash = "AQAAAAIAAYagAAAAELBNBVEaKLPiH0GMl0YJtU00Ss5zZODHsIRzLlxZlgsxD1ZOy8YBBpvTdyxPsp2+AQ==",
                            PhoneNumber = "0899248435",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FHSBRSP7Q6SW6JWBVKCFBC6LKFR4MAR7",
                            TwoFactorEnabled = false,
                            UserName = "lewis"
                        },
                        new
                        {
                            Id = "fe30e976-2640-4d35-8334-88e7c3b1eac1",
                            AccessFailedCount = 0,
                            BirthDay = new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "40495f9c-e853-41e8-8c5b-6b3c93d3791b",
                            Email = "test@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Lewis",
                            Image = "TESTIMAGE",
                            LockoutEnabled = true,
                            LockoutEnd = new DateTimeOffset(new DateTime(9999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            NormalizedEmail = "test@gmail.com",
                            NormalizedUserName = "test",
                            PasswordHash = "AQAAAAIAAYagAAAAEFNwXlIXp0mbDE5k1gIQdlbAczn8BwINQnF5S0qULxDK/6luT/bumpD+HFOXM0k59A==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "VEPOTJNXQCZMK3J7R27HMLXD64T72GU6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("hrOT.Domain.IdentityModel.AppIdentityRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppIdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "37dde3f4-d0c9-4477-97d6-ff29f677dccc",
                            Name = "Manager",
                            NormalizedName = "MANAGER",
                            Description = "Quản lí hệ thống"
                        },
                        new
                        {
                            Id = "b9cf3487-3d04-4cbf-85b7-e33360566485",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE",
                            Description = "Nhân viên công ty"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("hrOT.Domain.IdentityModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("hrOT.Domain.IdentityModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hrOT.Domain.IdentityModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("hrOT.Domain.IdentityModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Allowance", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.AllowanceType", "AllowanceType")
                        .WithMany("Allowances")
                        .HasForeignKey("AllowanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hrOT.Domain.Entities.EmployeeContract", "EmployeeContract")
                        .WithMany("Allowances")
                        .HasForeignKey("EmployeeContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllowanceType");

                    b.Navigation("EmployeeContract");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.BankAccount", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("BankAccounts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Degree", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("Degrees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.DetailTaxIncome", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.PaySlip", "PaySlip")
                        .WithMany("DetailTaxIncomes")
                        .HasForeignKey("PaySlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaySlip");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Employee", b =>
                {
                    b.HasOne("hrOT.Domain.IdentityModel.ApplicationUser", "ApplicationUser")
                        .WithOne("Employee")
                        .HasForeignKey("hrOT.Domain.Entities.Employee", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hrOT.Domain.Entities.Position", "Position")
                        .WithMany("Employee")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.EmployeeContract", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("EmployeeContracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Experience", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("Experiences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Family", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("Families")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.LeaveLog", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("LeaveLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hrOT.Domain.Entities.LeaveType", "LeaveType")
                        .WithMany("LeaveLogs")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.OvertimeLog", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("OvertimeLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.PaySlip", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.EmployeeContract", "EmployeeContract")
                        .WithMany("PaySlips")
                        .HasForeignKey("EmployeeContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeContract");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Position", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Department", "Department")
                        .WithMany("Positionss")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Skill_Employee", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("Skill_Employees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hrOT.Domain.Entities.Skill", "Skill")
                        .WithMany("Skill_Employees")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.TimeAttendanceLog", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.Employee", "Employee")
                        .WithMany("TimeAttendanceLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.TodoItem", b =>
                {
                    b.HasOne("hrOT.Domain.Entities.TodoList", "List")
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.TodoList", b =>
                {
                    b.OwnsOne("hrOT.Domain.ValueObjects.Colour", "Colour", b1 =>
                        {
                            b1.Property<Guid>("TodoListId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("TodoListId");

                            b1.ToTable("TodoLists");

                            b1.WithOwner()
                                .HasForeignKey("TodoListId");
                        });

                    b.Navigation("Colour")
                        .IsRequired();
                });

            modelBuilder.Entity("hrOT.Domain.Entities.AllowanceType", b =>
                {
                    b.Navigation("Allowances");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Department", b =>
                {
                    b.Navigation("Positionss");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Employee", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Degrees");

                    b.Navigation("EmployeeContracts");

                    b.Navigation("Experiences");

                    b.Navigation("Families");

                    b.Navigation("LeaveLogs");

                    b.Navigation("OvertimeLogs");

                    b.Navigation("Skill_Employees");

                    b.Navigation("TimeAttendanceLogs");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.EmployeeContract", b =>
                {
                    b.Navigation("Allowances");

                    b.Navigation("PaySlips");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.LeaveType", b =>
                {
                    b.Navigation("LeaveLogs");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.PaySlip", b =>
                {
                    b.Navigation("DetailTaxIncomes");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Position", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.Skill", b =>
                {
                    b.Navigation("Skill_Employees");
                });

            modelBuilder.Entity("hrOT.Domain.Entities.TodoList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("hrOT.Domain.IdentityModel.ApplicationUser", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
